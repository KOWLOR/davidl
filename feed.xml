<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DavidL design + développement</title>
  <subtitle>Développeur front-end. Je crée des sites internet qui fonctionnent à merveille sur n'importe quel appareil. Je suis un concepteur de sites web spécialisé HTML et CSS basé à Lille</subtitle>
  <id>http://davidl.fr/blog/</id>
  <link href="http://davidl.fr/blog/"/>
  <link href="http://davidl.fr/blog/feed.xml" rel="self"/>
  <updated>2014-05-26T22:00:00Z</updated>
  <author>
    <name>David Leuliette</name>
  </author>
  <entry>
    <title>Résoudre le problème @import des fichiers Sass</title>
    <link rel="alternate" href="http://davidl.fr/blog/import-sass.html"/>
    <id>http://davidl.fr/blog/import-sass.html</id>
    <published>2014-05-26T22:00:00Z</published>
    <updated>2014-06-12T10:44:47+02:00</updated>
    <author>
      <name>DavidL design + développement</name>
    </author>
    <content type="html">&lt;p&gt;Avec ses variables, fonctions et imports, Sass donne des supers pouvoirs au fichiers CSS. Plus précisément, il est possible d'importer et d'organiser ses fichiers SCSS de différentes manières. Mais tout ce pouvoir amène d'autres problèmes : la possibilité d'importer différents fichiers dans votre projet signifie que vous aller devoir gérer ses fichiers.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Super pouvoirs et Sass" src="https://farm6.staticflickr.com/5095/5449679657_46fed579c2_z.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Superman wallpaper par &lt;a href="https://www.flickr.com/photos/dangergraphics/"&gt;Jason Csizmadi&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;D'expérience cela peut provoquer de bonnes crises d'hystérie, mais avec l'habitude j'ai appris à contrecarrer ces différents problèmes et j'ai décidé de partager ces problèmes pour vous faire gagner du temps. &lt;strong&gt;Voici toutes les réponses aux question que vous vous posez pour organiser vos fichiers en Sass&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id="dfinition-dun-partial-en-sass"&gt;Définition d'un &lt;code&gt;partial&lt;/code&gt; en Sass&lt;/h2&gt;

&lt;p&gt;Un &lt;strong&gt;partial&lt;/strong&gt; est un fichier qui contient votre Sass. J'utilise des &lt;code&gt;partial&lt;/code&gt;s pour organiser mes projets : les boutons dans un fichier, la typographie dans un autre… Cette architecture permet de rapidement trouver et faire des changements dans des projets complexes.&lt;/p&gt;

&lt;p&gt;Les &lt;code&gt;partial&lt;/code&gt;s ne sont pas de &lt;em&gt;réels&lt;/em&gt; fichiers Sass car &lt;code&gt;sass watch&lt;/code&gt; ne les convertira pas en CSS. Ils doivent êtres importés dans un fichier &lt;code&gt;.scss&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt="Sublime text search shortcut" src="https://lh4.googleusercontent.com/-s1uPAH3rKvw/U4SDcBFVBGI/AAAAAAAAAIc/2U5QGQt_8lM/w480-h300-no/search.gif" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Avec sublime text &lt;code&gt;cmd&lt;/code&gt; + &lt;code&gt;t&lt;/code&gt; permet de faire une recherche rapide).&lt;/em&gt;&lt;/p&gt;

&lt;h2 id="sass-peut-importer-uniquement-les-fichiers-commenant-par-underscrore-"&gt;Sass peut importer uniquement les fichiers commençant par underscrore ?&lt;/h2&gt;

&lt;p&gt;Dans certains cas, vos fichiers Sass seront ignorés si vous les importez sans les préfixer avec &lt;code&gt;_&lt;/code&gt;. Ceci dit, Sass n'est pas de la magie noire et ne convertira pas &lt;code&gt;_button.scss&lt;/code&gt; en &lt;code&gt;button.scss&lt;/code&gt; pour votre site. Vous pouvez seulement importer des fichiers commençant par &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Pour résumer, comprendre &lt;strong&gt;comment architecturer vos fichiers Sass&lt;/strong&gt; est aussi important que Sass lui-même. Voici la convention que je recommande :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Renommer votre fichier CSS principal (application.css en application.scss par exemple)&lt;/li&gt;
  &lt;li&gt;Ajouter votre code Sass dans ce fichier pour vous familiariser avec le langage&lt;/li&gt;
  &lt;li&gt;Organiser vos fichiers en &lt;code&gt;partial&lt;/code&gt;s (comme _grid.scss) dès que votre fichier devient trop compliqué à maintenir / parcourir&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="peut-on-crire-du-css-dans-des-partials-sass-"&gt;Peut-on écrire du CSS dans des &lt;code&gt;partial&lt;/code&gt;s Sass ?&lt;/h2&gt;

&lt;p&gt;Absolument ! Cela ne dérange pas les fichiers Sass d'avoir du CSS à l'intérieur. La façon la plus rapide et la plus simple pour commencer à écrire du Sass est de prendre un fichier CSS existant, de changer son extension en &lt;code&gt;.scss&lt;/code&gt;, et de commencer à écrire du code Sass. Par exemple vous pouvez commencer par renommer &lt;code&gt;theme.css&lt;/code&gt; en &lt;code&gt;_theme.scss&lt;/code&gt; et ajouter progressivement des variables et des fonctions au style existant.&lt;/p&gt;

&lt;p&gt;Un bon point de départ est d'utiliser une convention de nommage pour les couleurs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$blue-steroid
$blue-light
$blue
$blue-dark
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
  &lt;p&gt;Donc on ne doit pas vraiment écrire de Sass dans application.scss —ce fichier est est seulement utilisé pour importer des partials ?&lt;/p&gt;

  &lt;p&gt;&lt;cite&gt;Un noob du Sass&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Techniquement vous pouvez écrire n'importe quoi dans &lt;code&gt;application.scss&lt;/code&gt;, mais je recommande de séparer vos composants en &lt;code&gt;partial&lt;/code&gt;s, et de les importer ensuite dans &lt;code&gt;application.scss&lt;/code&gt; pour conserver une bonne organisation depuis le départ.&lt;/p&gt;

&lt;p&gt;En réalité je commence à coder mes différents &lt;code&gt;partial&lt;/code&gt;s en début de projet. Je n'ai jamais besoin d'écrire de code Sass dans &lt;code&gt;application.scss&lt;/code&gt;, excepté les &lt;code&gt;@import&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="et-si-jutilise-un-framework-comme-foundationhttpfoundationzurbcom-"&gt;Et si j'utilise un framework comme &lt;a href="http://foundation.zurb.com/"&gt;Foundation&lt;/a&gt; ?&lt;/h2&gt;

&lt;p&gt;On peut se poser la question suivante : j'importe mes fichiers Sass avant ou après les &lt;code&gt;import&lt;/code&gt; pour Foundation ?&lt;/p&gt;

&lt;p&gt;Sass est très sensible à l'ordre des sélecteurs. Ceci dit, les déclaration les plus tardives dans vos fichiers &lt;code&gt;.scss&lt;/code&gt; écrasent celles faites précédemment. C'est pour cette raison que vous devez toujours importer vos &lt;code&gt;partial&lt;/code&gt;s &lt;strong&gt;après&lt;/strong&gt; Foundation pour personnaliser votre site. Par exemple :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import
  "foundation/components/block-grid",
  "foundation/components/buttons",
  "foundation/components/forms",
  "foundation/components/grid",
  "modules/my-typography",
  "modules/my-branding",
  "modules/my-buttons";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Dans ce cas &lt;code&gt;modules/my-buttons&lt;/code&gt; écrasera les boutons de Foundation. &lt;strong&gt;Importer vos fichiers après&lt;/strong&gt; ceux du framework signifie : "Oh grand magicien Sass, modifie moi les fichiers importés avant pour personnaliser mon site".&lt;/p&gt;

&lt;h2 id="est-ce-que-je-peux-dire--sass-dimporter-tous-les-partials-contenus-dans-un-dossier-"&gt;Est-ce que je peux dire à Sass d'importer tous les &lt;code&gt;partial&lt;/code&gt;s contenus dans un dossier ?&lt;/h2&gt;

&lt;p&gt;Non, pour les raisons exposées précédemment.&lt;/p&gt;

&lt;p&gt;Il n'y a &lt;strong&gt;pas de moyen fiable de contrôler l'ordre&lt;/strong&gt; dans lequel un dossier entier sera importé, vous devez donc importer chaque &lt;code&gt;partial&lt;/code&gt; vous-même…&lt;/p&gt;

&lt;p&gt;Et je vous voie venir à 100 km les apprentis hackers avec :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import "stylesheets/*"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Je vous souhaite bon courage dans la gestion de vos dépendances de variables, et dans l'optimisation de vos feuilles de style.&lt;/p&gt;

&lt;p&gt;Comme vous l'avez vu dans la précédente question, vous pouvez importer une série de fichiers avec seulement une seule déclaration &lt;code&gt;@import&lt;/code&gt; en séparant chaque fichier par une virgule. Remarquez aussi que Sass ne nécessite pas d'écrire &lt;code&gt;.scss&lt;/code&gt; ou &lt;code&gt;_&lt;/code&gt; dans les noms de fichiers. Ce préprocesseur est assez intelligent pour reconnaitre ce que vous voulez faire.&lt;/p&gt;

&lt;h2 id="peut--on-utiliser-import-pour-embarquer-des-fichier-css-"&gt;Peut- on utiliser &lt;code&gt;@import&lt;/code&gt; pour embarquer des fichier .css ?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Mauvaise nouvelle&lt;/strong&gt; : Sass ne peut importer que des fichiers &lt;code&gt;.scss&lt;/code&gt; ou `.sass&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Bonne nouvelle&lt;/strong&gt; : &lt;code&gt;.scss&lt;/code&gt; est simplement du &lt;code&gt;.css&lt;/code&gt; avec une orthographe différente. Comme mentionné dans la première question, vous pouvez transformer vos fichiers &lt;code&gt;.css&lt;/code&gt; en &lt;code&gt;.scss&lt;/code&gt; simplement en changeant l'extension de fichier.&lt;/p&gt;

&lt;h2 id="si-tous-mes-partials-sont-dans-un-dossier-quelles-sont-les-formules-de-magie-noire-pour-compiler-ces-fichiers-dans-une-seule-feuille-de-style-"&gt;Si tous mes &lt;code&gt;partial&lt;/code&gt;s sont dans un dossier, quelles sont les formules de magie noire pour compiler ces fichiers dans une seule feuille de style ?&lt;/h2&gt;

&lt;p&gt;La syntaxe &lt;code&gt;@import&lt;/code&gt; utilisée en SCSS est complètement différente d'une ligne de commande. La &lt;em&gt;compilation&lt;/em&gt; s'éxécute avec une formule magique depuis un terminal, mais ces formules dépendent de votre environement d'éxécution.&lt;/p&gt;

&lt;p&gt;Par exemple :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sass : &lt;code&gt;sass watch&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Compass : &lt;code&gt;compass watch&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Grunt : &lt;code&gt;grunt&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Middleman : &lt;code&gt;middleman server&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Astuces et bonnes pratiques pour la performance d'un site internet</title>
    <link rel="alternate" href="http://davidl.fr/blog/site-obese.html"/>
    <id>http://davidl.fr/blog/site-obese.html</id>
    <published>2014-05-20T22:00:00Z</published>
    <updated>2014-05-30T14:09:42+02:00</updated>
    <author>
      <name>DavidL design + développement</name>
    </author>
    <content type="html">&lt;p&gt;Certains d'entre vous ont sûrement connu l'époque du 56k. En ce temps là, charger une seule image sur internet pouvait demander plusieures minutes. Puis est arrivé l'ADSL et le haut débit qui ont démultiplié la vitesse de chargement. Bizarrement j'ai l'impression que nous passons toujours autant de temps à attendre le chargement d'une page web.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Site internet obèse" src="https://farm6.staticflickr.com/5519/14256724243_9a829c4dd1_o.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;De nos jours les sites sont de plus en plus complexes, embarquent de plus en plus de contenu. Grâce à la fibre optique ces derniers se chargent de plus en plus vite… En théorie car paradoxalement le web évolue vite, mais les sites web sont toujours aussi long à charger.&lt;/p&gt;

&lt;p&gt;Il existe beaucoup d'options pour améliorer la performance de votre site internet. Pour vous aider à décider comment mettre en place ces solutions j'ai découpé cet article en 3 parties :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Geek&lt;/li&gt;
  &lt;li&gt;Guru&lt;/li&gt;
  &lt;li&gt;Hacker&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chaque technique peut être déployée partiellement, en partie ou pas du tout. Chaque palier peut vous aider lors du développement de votre site suivant son niveau de complexité.&lt;/p&gt;

&lt;h2 id="geek-de-la-performance"&gt;Geek de la performance&lt;/h2&gt;

&lt;p&gt;Les 2 choses les plus simples à mettre en place rapidement sont la compression des fichiers et les en-têtes de cache. Ces techniques indispensables vous aiderons à :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Réduire le poids des pages.&lt;/li&gt;
  &lt;li&gt;Réduire le nombre de requêtes http, et donc la latence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Puisque ces modifications ont lieu côté serveur, elles amélioreront immédiatement les performances de chaque page.&lt;/p&gt;

&lt;h3 id="activer-moddeflate-pour-la-compression-gzip-de-vos-fichiers"&gt;Activer &lt;code&gt;mod_deflate&lt;/code&gt; pour la compression &lt;code&gt;Gzip&lt;/code&gt; de vos fichiers&lt;/h3&gt;

&lt;p&gt;De la même manière que nous zippons nos pièces jointes envoyées par email, votre serveur peut compresser les fichiers avant de les envoyer au navigateur. Pour &lt;strong&gt;préserver la bande passante&lt;/strong&gt; de vos utilisateurs mobiles, il est capital de réduire le plus possible la taille de votre site.&lt;/p&gt;

&lt;p&gt;La librairie de compression pour Apache &lt;code&gt;mod_deflate&lt;/code&gt; fonctionne uniquement sur des fichiers textes comme &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt; et &lt;code&gt;JavaScript&lt;/code&gt;. Les images &lt;code&gt;.jpg&lt;/code&gt;, &lt;code&gt;.gif&lt;/code&gt; ou &lt;code&gt;.png&lt;/code&gt; sont compressées à différents niveaux, comme expliqué plus loin dans cet article, cette librairie n'ont donc aucun effet sur elles.&lt;/p&gt;

&lt;p&gt;La mise en place demande 3 étapes :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Aller sur le projet &lt;a href="https://github.com/h5bp/html5-boilerplate/blob/master/.htaccess#L499"&gt;GitHub HTML5Boilerplate&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Copier le contenu &lt;code&gt;mod_deflate&lt;/code&gt; du fichier &lt;code&gt;.htaccess&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;et le coller sur votre serveur.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="mettre-les-ressources-en-cache"&gt;Mettre les ressources en cache&lt;/h3&gt;

&lt;p&gt;Si votre site est correctement architecturé, les mises à jours des ressources &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;JavaScript&lt;/code&gt; et images sont moins fréquentes que le contenu. Dans un contexte mobile nous pouvons télécharger ces ressources statiques en une seule fois, et les mettre en cache sur l'appareil.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Moins de requêtes http seront effectuées.&lt;/li&gt;
  &lt;li&gt;Le contenu total à télécharger est diminué.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;De cette façon, pour les futures visites, l'expérience de navigation sera incroyablement plus rapide et donc meilleure. L'astuce consiste à utiliser les entêtes d'expiration avec une date adaptée.&lt;/p&gt;

&lt;p&gt;Il n’est pas conseillé de spécifier une durée inférieure à 1 mois et supérieure à un an. Si vous changez régulièrement une ressource vous pouvez :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Spécifier et identifier cette ressource dans votre fichier &lt;code&gt;.htaccess&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Modifier le nom du fichier, qui est une bien meilleure solution car cela donnera naissance à une nouvelle requête http.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La mise en place demande 3 étapes :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Aller sur le projet &lt;a href="https://github.com/h5bp/html5-boilerplate/blob/master/.htaccess#L563"&gt;GitHub HTML5Boilerplate&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Copier le fichier &lt;code&gt;.htaccess&lt;/code&gt;, pour la partie &lt;code&gt;mod_expires&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;et le coller sur votre serveur.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;La plus grande limite de cette technique est la taille du cache des appareils mobiles. Un site web simple doit peser en moyenne 2Mo, le cache des appareils Android 2.x est limité à 6Mo, les appareils iOS sont plus avantagés avec un cache de 50Mo.&lt;/p&gt;

&lt;p&gt;Pour contourner ce problème nous pouvons mettre en place une fonctionnalité en utilisant l'API HTML5 &lt;code&gt;localStorage&lt;/code&gt; mais pour cela il faut être guru de la performance.&lt;/p&gt;

&lt;h2 id="hacker-de-la-performance"&gt;Hacker de la performance&lt;/h2&gt;

&lt;p&gt;La compression et la mise en cache des fichiers sont de bonnes pratiques mais ce n'est que la base. Pour avoir un &lt;strong&gt;réel impact sur la performance&lt;/strong&gt; et offrir une expérience optimisée à vos utilisateurs vous allez devoir travailler plus. Les techniques de cette partie permettent de :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Réduire le poids de vos pages.&lt;/li&gt;
  &lt;li&gt;Réduire le nombre de requêtes à votre serveur, et donc la latence.&lt;/li&gt;
  &lt;li&gt;Afficher du contenu à la demande.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les techniques de minification et de concaténation devraient êtres mises en places lors de déploiement dans des environnements de test / production. Elles ne sont pas vraiment utiles si vos mises à jours sont fréquentes et multiples.&lt;/p&gt;

&lt;h3 id="mettre-vos-fichiers-au-rgime"&gt;Mettre vos fichiers au régime.&lt;/h3&gt;

&lt;p&gt;Minifier votre code source signifie simplement supprimer les octets inutiles d'un fichier (espaces, indentation et saut de ligne). Cette syntaxe est indispensable pour qu'un humain comprenne, mais elle n'est pas nécessaire pour l'éxécution du code sur une machine.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Le code source est écrit pour les humain, pas pour les machines&lt;/p&gt;

  &lt;p&gt;&lt;cite&gt;@drublic&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Avec la minification le navigateur télécharge moins de contenu, le rendu de votre page est donc plus rapide.&lt;/p&gt;

&lt;p&gt;Si vous utilisez une librairie populaire comme jQuery vous utilisez certainement la version &lt;code&gt;.min&lt;/code&gt;. La minification n'est pas seulement disponible pour le JavaScript, mais peut être appliquée à n'importe quelle type de ressource texte. L'&lt;code&gt;asset&lt;/code&gt; principale qui doit être minifiée dans un code de production est le CSS. La plus vieille solution pour réaliser cette opération est &lt;a href="http://yui.github.io/yuicompressor/"&gt;YUI Compressor&lt;/a&gt; de yahoo! Si vous êtes un &lt;a href="http://davidl.fr/manifesto.html"&gt;développeur front-end éclairé&lt;/a&gt; essayez de chercher du côté des tâches grunt pour automatiser cette opération.&lt;/p&gt;

&lt;h3 id="la-concatnation--un-fichier-pour-les-gouverner-tous"&gt;La concaténation : un fichier pour les gouverner tous&lt;/h3&gt;

&lt;p&gt;Si le père de la performance est la minification, la concaténation des fichiers est sans doute la mère. Par exemple : au lieu de télécharger 10 fichiers JavaScripts qui demandent 10 requêtes http au serveur, les utilisateurs devraient télécharger seulement 4 fichiers qui représentent la combinaison de ces 10 fichiers.&lt;/p&gt;

&lt;p&gt;Après les &lt;code&gt;mod_expires&lt;/code&gt;, la concaténation est la meilleure option à mettre en place pour fluidifier la navigation sur mobile. Malheureusement la pratique est plus complexe que la théorie.&lt;/p&gt;

&lt;p&gt;En moyenne un navigateur peut télécharger 6 fichiers en parallèle. Comme la minification YUI est un bon outil pour concaténer vos fichiers. Dans un environement ruby c'est l'&lt;code&gt;asset pipeline&lt;/code&gt; qui se charge du boulot, en php c'est &lt;a href="https://github.com/filamentgroup/quickconcat"&gt;quickconcat&lt;/a&gt;. Vous pouvez aussi &lt;a href="http://blog.carbonfive.com/2014/05/05/roll-your-own-asset-pipeline-with-gulp/"&gt;construire votre propre asset pipeline avec gulp&lt;/a&gt;&lt;/p&gt;

&lt;h3 id="optimisation-des-images"&gt;Optimisation des images&lt;/h3&gt;

&lt;p&gt;Les images sont les éléments qui prennent le plus de place. En moyenne, c'est plus de 60% dans le poids d'une page. C'est à chacun, développeur comme designer, d'optimiser le poids des images. Le processus se fait en plusieurs étapes :&lt;/p&gt;

&lt;h4 id="choisir-le-format-adapt"&gt;1. Choisir le format adapté&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;.png&lt;/code&gt; pour les aplats de couleurs, &lt;code&gt;.jpg&lt;/code&gt; pour les photographies. N'enregistrez &lt;strong&gt;jamais&lt;/strong&gt; vos images dans la qualité la plus haute mais essayez de trouver le bon compromis entre qualité / poids.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Enregistrement .jpg progressif avec Photoshop" src="https://farm3.staticflickr.com/2901/14256724273_85583d2db6_o.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Avec Photoshop &lt;code&gt;fichier&lt;/code&gt; &amp;gt; &lt;code&gt;enregistrer pour le web&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;N'oubliez pas de cocher la case &lt;strong&gt;jpg progressif&lt;/strong&gt;, cette technique utilisée pour les débits lents à l'époque du 56k prends tout son sens aujourd'hui dans un &lt;a href="http://calendar.perfplanet.com/2012/progressive-jpegs-a-new-best-practice/"&gt;contexte de navigation mobile&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id="supprimer-les-informations-inutiles"&gt;2. Supprimer les informations inutiles&lt;/h4&gt;

&lt;p&gt;Pour gagner quelques octets supplémentaires il est possible de supprimer d'autres informations encapsulées dans les images (métadonnées, informations de claques, …) Cette opération peut se faire très facilement avec des logiciels comme :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://imageoptim.com/"&gt;imgOptim&lt;/a&gt; pour macOS&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://pnggauntlet.com/"&gt;pngGauntlet&lt;/a&gt; pour windows&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Si vous souhaitez en savoir plus sur l'optimisation des images, je vous invite chaudement à lire les articles de Serguey Chikuyonok's sur l'optimisation intelligente des images &lt;code&gt;.png&lt;/code&gt; et &lt;code&gt;.jpg&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://www.smashingmagazine.com/2009/07/15/clever-png-optimization-techniques/"&gt;Optimiser ses images png&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.smashingmagazine.com/2009/07/01/clever-jpeg-optimization-techniques/"&gt;Optimiser ses fichiers jpg&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="automatiser-la-tche"&gt;3. Automatiser la tâche&lt;/h4&gt;

&lt;p&gt;Avec la puissance de node et &lt;a href="https://github.com/JamieMason/ImageOptim-CLI"&gt;ImageOptim-CLI&lt;/a&gt; il est possible d’automatiser tout ce processus pour vous permettre de gagner un temps considérable.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g imageoptim-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id="lazy-loading-dimages"&gt;4. Lazy Loading d'images&lt;/h4&gt;

&lt;p&gt;Comme me l'a fait remarqué &lt;a href="https://twitter.com/gaelmetais"&gt;@gaelmetais&lt;/a&gt;, expert en performance web, la solution qui donne les meilleurs résultats est le lazy loading d'images.
Cette solution &lt;a href="https://github.com/vvo/lazyload"&gt;JavaScript disponible sur github&lt;/a&gt; permet de ne charger que les images visible du &lt;code&gt;viewport&lt;/code&gt;. Cela évite de télécharger inutilement des images qui ne sont probablement jamais vues par les visiteurs.&lt;/p&gt;

&lt;h3 id="reporter-le-chargement-du-contenu"&gt;Reporter le chargement du contenu&lt;/h3&gt;

&lt;p&gt;Toutes les techniques précédentes, ormis la concaténation, vous aiderons à réduire la taille de vos pages. Une autre approche est de prioriser le chargement de votre contenu.&lt;/p&gt;

&lt;p&gt;La performance n'augmentera pas, c'est le sentiment de vitesse que ressentira l'utilisateur qui doit être perceptible. Le moyen le plus simple de retarder le chargement d'un fichier JavaScript en utilisant l'attribut HTML5 &lt;code&gt;defer&lt;/code&gt; ou &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;script defer src="application.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script async src="application.js"&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;D'un point de vue latence et performance ces attributs se comportent de façon similaire. Ils demandent au navigateur d'éxécuter les scripts seulement après avoir téléchargé l'intégralité du contenu de la page.&lt;/p&gt;

&lt;p&gt;Vous devez vous poser la question : quel priorité dois-je utiliser ?&lt;/p&gt;

&lt;h4 id="defer-charge-les-scripts-dans-lordre-dappel"&gt;&lt;code&gt;defer&lt;/code&gt; charge les scripts dans l'ordre d'appel&lt;/h4&gt;

&lt;p&gt;Supposons que vous chargez la librairie jQuery ainsi qu'un autre fichier de plug-in. Ces 2 fichiers sont dépendant car le socond script doit être chargé &lt;em&gt;après&lt;/em&gt; le premier.&lt;/p&gt;

&lt;h4 id="async-le-chargement-de-lordre-des-fichiers-na-aucune-importance"&gt;&lt;code&gt;async&lt;/code&gt; le chargement de l'ordre des fichiers n'a aucune importance&lt;/h4&gt;

&lt;h2 id="guru-de-la-performance"&gt;Guru de la performance&lt;/h2&gt;

&lt;p&gt;Les geeks et les hackers de la performance utilisent des techniques d'optimisation traditionnelles pour la construction de sites internet, bien avant l'apparition du responsive design.&lt;/p&gt;

&lt;p&gt;Les techniques de guru peuvent êtres mises en place pour des applications web HTML5 avec un focus pour les navigateurs mobiles. Elles permettent de :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Réduire le poids de vos pages.&lt;/li&gt;
  &lt;li&gt;Réduire le nombre de requêtes http, et donc la latence.&lt;/li&gt;
  &lt;li&gt;Optimiser le chargement du contenu pour être utilisé plus rapidement.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="alert-box alert"&gt;
Le principal désavantage est le support des navigateurs
&lt;/div&gt;

&lt;p&gt;Dans certains cas il ne sera pas possible de garantir le résultat sur de vieux navigateurs. N'hésitez pas à vérifier les différentes fonctionnalités sur le site &lt;a href="http://caniuse.com"&gt;caniuse&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="ordre-des-sources"&gt;Ordre des sources&lt;/h3&gt;

&lt;p&gt;Curieusement organiser correctement votre CSS et vos fichiers JavaScript peut avoir un large impact sur le ressenti de la rapidité de chargement.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript bloque le chargement de votre contenu&lt;/p&gt;

  &lt;p&gt;&lt;cite&gt;&lt;a href="/manifesto.html"&gt;Manifeste d'un développeur front-end&lt;/a&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Voici un très mauvais exemple que je rencontre quotidiennement :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;
  &amp;lt;script src="jquery.js"&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;link rel="stylesheet" href="small.css"&amp;gt;
  &amp;lt;link rel="stylesheet" href="big.css"&amp;gt;
&amp;lt;/head&amp;gt;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vous ne devez &lt;strong&gt;JAMAIS&lt;/strong&gt; faire cela. Le JavaScript bloque téléchargement des autres ressources en parallèle comme les images. Sauf exception votre JavaScript doit toujours être appelé uniquement avant la fin du &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h3 id="localstorage-comme-cache-navigateur"&gt;&lt;code&gt;localStorage&lt;/code&gt; comme cache navigateur&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;localStorage&lt;/code&gt; est une spécification du W3C. Cette technologie est comparable aux cookies utilisés par les développeurs pour stocker des informations de type clef / valeur. Elles sont sauvegardées même si le navigateur est fermé. Contrairement aux cookies les informations associées au &lt;code&gt;localStorage&lt;/code&gt; ne sont jamais renvoyées au serveur depuis le client.&lt;/p&gt;

&lt;p&gt;Voici un exemple assez basique : utiliser &lt;code&gt;localStorage&lt;/code&gt; pour mettre en cache jQuery&lt;/p&gt;

&lt;script src="https://gist.github.com/flexbox/1832f48d92f1bee693ce.js"&gt;&lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;Vérifier si le fichier existe&lt;/li&gt;
  &lt;li&gt;Charger le contenu en AJAX&lt;/li&gt;
  &lt;li&gt;Insérer le contenu dans la page avec &lt;code&gt;js-jquery&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Il faut noter que &lt;code&gt;localStorage&lt;/code&gt; ne fonctionne qu'avec des &lt;code&gt;string&lt;/code&gt;. Si vous souhaiter utiliser cette méthode pour stocker des images, vous devez les parser en base64 d'abord.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;localStorage&lt;/code&gt; est une solution assez facile à mettre en place pour des choses basiques. Si vous souhaitez aller plus loin je vous conseille d'essayer &lt;a href="https://github.com/addyosmani/basket.js"&gt;basket.js&lt;/a&gt; maintenu par Addy Osmani qui permet de prioriser le chargement du JavaScript en cache.&lt;/p&gt;

&lt;h3 id="lazy-loading-javascript"&gt;Lazy loading JavaScript&lt;/h3&gt;

&lt;p&gt;Si votre application web / site internet embarque beaucoups de JavaScript il peut être intéressant de d'utiliser des techniques de &lt;em&gt;lazy loading&lt;/em&gt; pour réduire le temps de démarrage.&lt;/p&gt;

&lt;p&gt;Quand un navigateur télécharge du JavaScript, il le &lt;strong&gt;parcours et l'exécute&lt;/strong&gt;. Comme expliqué précédemment, cela bloque le rendu de la page jusqu'à ce que le processus soit terminé. Dans la plupart des cas, vous n'avez sûrement pas besoin que tout votre JavaScript soit parcouru et exécuté au chargement de la page. Cela porte préjudice à la performance sans raison valable.&lt;/p&gt;

&lt;p&gt;Il existe 2 techniques pour corriger le problème :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Modifier le script précédemment utilisé pour &lt;code&gt;localStorage&lt;/code&gt; en utilisant JavaScript pour insérer du JavaScript.&lt;/li&gt;
  &lt;li&gt;Utiliser &lt;code&gt;XmlHttpRequest&lt;/code&gt; pour &lt;strong&gt;télécharger et évaluer&lt;/strong&gt; le code. Le principal problème est que si l'utilisateur essaye d'utiliser une fonctionnalité qui n'est pas encore téléchargé cela risque de "casser" la mise en page.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;L'équipe qui s'occupe de Gmail a trouvé une solution pour que le code ne soit pas exécuté : &lt;a href="http://googlecode.blogspot.de/2009/09/gmail-for-mobile-html5-series-reducing.html"&gt;commenter le code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Le navigateur télécharge et évalue l'intégralité de votre JavaScript, mais comme ce dernier est commenté, il n'est pas exécuté. Cette méthode libère du CPU pour effectuer d'autres opérations. Quand l'utilisateur a besoin d'une fonctionnalité, une partie du code est décommentée et évaluée. Voici un exemple :&lt;/p&gt;

&lt;script src="https://gist.github.com/flexbox/c244d7bebd646582fcfe.js"&gt;&lt;/script&gt;

&lt;p&gt;Cette technique est complexe à mettre en place car votre architecture JavaScript doit être irréprochable.&lt;/p&gt;

&lt;h3 id="le-cas-des-boutons-sociaux"&gt;Le cas des boutons sociaux&lt;/h3&gt;

&lt;p&gt;Fin 2011, le magazine Allemand Heise a publié un nouvel ensemble d'&lt;a href="http://www.heise.de/extras/socialshareprivacy/"&gt;icônes pour les réseau sociaux&lt;/a&gt; très connu. La différence ? Il faut 2 clics pour "aimer", "tweeter" ou ajouter "+1".&lt;/p&gt;

&lt;p&gt;De base les images des icones sont chargées. Si l'utilisateur souhaite partager, alors les widgets de partage sont téléchargés. Cette solution présente de nombreux avantages non négligeables.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Les utilisateurs ne sont pas constamment trackés. Les widgets ne sont activés que si l'utilisateur le demande et non par défaut.&lt;/li&gt;
  &lt;li&gt;Extrèmement efficace avec du responsive design.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img alt="Image zurb webcitation" src="https://farm3.staticflickr.com/2898/14050189350_521f32f74f_o.png" /&gt;
&lt;em&gt;&lt;a href="http://zurb.com/article/883/small-painful-buttons-why-social-media-bu"&gt;Pourquoi les boutons sociaux tuent votre site web ?&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;De plus vous ne téléchargez que ce qui est nécessaire. Si un utilisateur n'est actif que sur twitter, l'obliger à télécharger le widget facebook n'a pas de sens, et cela lui évite un temps de latence en supprimant les requêtes http inutiles.&lt;/p&gt;

&lt;h3 id="utiliser-des-sprites-pour-concatner-vos-images"&gt;Utiliser des sprites pour concaténer vos images&lt;/h3&gt;

&lt;p&gt;Les fichiers CSS et JavaScript ne sont pas les seuls à pouvoir êtres combinés pour réduire le nombre de requêtes. Utilisés généralement pour des icones ou de petites illustrations, la technique des sprites CSS est une bonne solution.&lt;/p&gt;

&lt;p&gt;Essayez de regrouper des images partageant la même palette  de couleur. Si ce n'est pas le cas la taille de votre fichier sera anormalement élevée car il sera sauvegardé au format PNG &lt;code&gt;true color&lt;/code&gt; au lieu du classique PNG 256 couleurs. Pour éviter une requête avec des images de petites tailles, vous pouvez aussi encoder le résultat obtenu en base64 pour optimiser encore plus la taille de votre fichier (à prendre avec précaution car cela peut augementer la taille jusqu'à 37%).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://www.base64-image.de/"&gt;base64&lt;/a&gt; pour encoder vos images&lt;/li&gt;
  &lt;li&gt;Un outil CSS : &lt;a href="http://spriteme.org/"&gt;SpriteMe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="viter-le-calcul-navigateur-aka-browser-reflow"&gt;Éviter le calcul navigateur aka browser reflow&lt;/h3&gt;

&lt;p&gt;Une fonctionnalité peu connue des développeurs en terme de performance est la construction d'une page web dans une fenêtre de navigateur. Des problèmes de performance apparaissent dès que l'on essaye de trop modifier dynamiquement la mise en page. Cela force le navigateur à recalculer la place des objets tout en chargeant la page, ce qui ralenti le rendu de la page.&lt;/p&gt;

&lt;p&gt;&lt;img alt="CSS image reflow" src="https://farm6.staticflickr.com/5524/14234276822_25ce57d1cd_o.gif" /&gt;&lt;/p&gt;

&lt;p&gt;La chose la plus importante pour limiter le nombre de "reflow" est de limiter la taille du DOM et le nombre de sélecteurs CSS le plus possible. Moins le DOM contient d'éléments, moins d'objets doivent êtres calculés et positionnés pendant la construction de la page et plus elle se chargera vite. Je ne le répéterai jamais assez :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;JavaScript est pour le comportement, CSS pour le style.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;C'est pourquoi vous ne devez &lt;strong&gt;JAMAIS&lt;/strong&gt; modifier vos éléments avec du JavaScript.&lt;/p&gt;

&lt;div class="alert-box alert"&gt;
&lt;i class="fa fa-thumbs-o-down"&gt;&lt;/i&gt; Mauvaise solution
&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;var el = document.getElementById('js-box');
el.style.color = "#fff";
el.style.backgroundColor = "#000";
el.style.borderColor = "#fc0";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Chaque déclaration provoque un calcul. Dans notre cas il y a 3 reflow.&lt;/p&gt;

&lt;div class="alert-box success"&gt;
&lt;i class="fa fa-thumbs-o-up"&gt;&lt;/i&gt; Bonne solution
&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;var el = document.getElementById('js-box');
el.className = "m-box";
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1 seul reflow. Le style est déclaré à sa place : dans une feuille de style et vous n'aurez pas besoin d'utiliser &lt;code&gt;!important&lt;/code&gt; si votre élément change.&lt;/p&gt;

&lt;p&gt;Les calculs sont aussi impactés par l'ajout d'élements au DOM.&lt;/p&gt;

&lt;p&gt;&lt;img alt="Border image reflow" src="https://farm3.staticflickr.com/2922/14234595522_c68157e017_o.jpg" /&gt;
&lt;em&gt;Il y a le bon :hover et le mauvais :hover&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Pour aller plus loin et comprendre le fonctionnement d'un navigateur web je vous invite à regarder l'excellente présentation de &lt;a href="https://www.youtube.com/watch?v=enKJMUArlV4"&gt;Paul Rouget développeur chez Mozilla&lt;/a&gt;. Ou encore le projet &lt;a href="https://github.com/janjongboom/css-reflow-tracer"&gt;css-reflow-tracer&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="sur-mobile-toucher-est-meilleur-que-cliquer"&gt;Sur mobile toucher est meilleur que cliquer&lt;/h3&gt;

&lt;p&gt;L'impression de rapidité et la performance sont 2 choses différentes.&lt;/p&gt;

&lt;p&gt;Connaissez-vous le célèbre délai des 300ms implémenté par tous les appareils mobiles ? Ce délai permet aux utilisateurs d'avoir le temps d'effectuer un double-tap. Dans certains cas il n'est pas nécessaire et pour retirer ce délai il existe des solutions :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://developers.google.com/mobile/articles/fast_buttons"&gt;Comment créer des boutons rapides&lt;/a&gt; ?&lt;/li&gt;
  &lt;li&gt;Le polyfill &lt;a href="https://github.com/ftlabs/fastclick"&gt;Fastclic.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="aller--lessentiel-et-supprimer-les-normes-frameworks"&gt;Aller à l'essentiel et supprimer les énormes frameworks&lt;/h3&gt;

&lt;p&gt;JavaScript n'est pas le seul responsable dans l'explosion du poids des pages web, notamment depuis que l'internet se &lt;a href="http://getbootstrap.com"&gt;bootstrapize&lt;/a&gt;. Le framework bootsrap de twitter est une excellente solution mais utilisez ses composants avec partimonie. Préférez lui une solution plus légère comme Foundation ou encore KNACSS. Vous pouvez aussi envisager de construire votre propre grille avec &lt;a href="http://susy.oddbird.net/"&gt;Suzy&lt;/a&gt; et créer vos propres composants.&lt;/p&gt;

&lt;p&gt;Il est facile d'inclure dans votre projet des librairies comme jQuery ou mootools, et d'y ajouter une myriade de plugins. En tant que développeurs nous devons nous poser la question de ce qui est vraiment utile. Si vous utiliser jQuery seulement comme outil de sélection &lt;code&gt;$('element')&lt;/code&gt; regardez du coté de &lt;a href="https://github.com/chjj/zest"&gt;Zest&lt;/a&gt; ou &lt;a href="https://github.com/ded/qwery"&gt;qwery&lt;/a&gt;. Ces micro framework JavaScript sont spécialement crées pour ça et leur taille est d'environ 11ko comparé à plus de 90ko.&lt;/p&gt;

&lt;p&gt;Comme expliqué précédemment, quand un navigateur télécharge jQuery, il doit parcourir le fichier. Cela demande du temps et bloque le rendu de la page. Soyez critique quand vous analysez vos besoins en JavaScript. 11ko c'est peut-être 11ko de trop si la seule chose dont vous avez besoin est &lt;code&gt;document.getElementByTagName('foo')&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="la-performance-comme-budget"&gt;La performance comme budget&lt;/h2&gt;

&lt;p&gt;Généralement la performance ne fait fait l'objet d'un budget pour un projet web. Mais tout comme les créateurs de jeux vidéos qui ont une limite dans le nombre de polygones affichés à l'écran, les développeurs devraient imposer une limite de taille pour alléger le poids des sites internets.&lt;/p&gt;

&lt;p&gt;Si votre client est résistant à se soucier de la performance, voici une petite astuce qui fonctionne :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Sélectionner deux sites (au hasard le site web du client ainsi qu’un concurrent)&lt;/li&gt;
  &lt;li&gt;préchargez / precachez le site du concurrent en dur dans le cache (avec &lt;code&gt;localStorage&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;et l'exécuter en comparant le site internet du client non mise en cache.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Personne ne veut attendre et les gens sont impatient, à partir du moment où le client comprendra la différence, il voudra un site web rapide, et investira pour avoir une bonne performance.&lt;/p&gt;

&lt;p&gt;C'est culotté, mais cette méthode permet de démontrer l'importance de la performance. Je ne pense pas que cette façon de faire soit différente des publicicités télévisées que l'on voit à longeur de journée.&lt;/p&gt;

&lt;p&gt;Pour aller plus loin, vous pouver créez un graphique comparatif du temps de chargement contre le trafic en temps réel, le client verra la corrélation entre les deux. De nombreuses décisions devront être réexaminées dans le but de performance, je crois que c'est une très, très bonne chose !&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Migration de wordpress vers ruby et Middleman</title>
    <link rel="alternate" href="http://davidl.fr/blog/migration-wordpress.html"/>
    <id>http://davidl.fr/blog/migration-wordpress.html</id>
    <published>2014-04-13T22:00:00Z</published>
    <updated>2014-06-12T10:44:47+02:00</updated>
    <author>
      <name>DavidL design + développement</name>
    </author>
    <content type="html">&lt;p&gt;Depuis quelque temps maintenant j’ai dit &lt;a href="http://lesjoiesducode.fr/post/78835971429/quand-lintegrateur-veut-toucher-au-php"&gt;au revoir à wordpress&lt;/a&gt; et bonjour à middleman.
J'ai décidé de m'éloigner de Wordpress, car je me retrouvais souvent à livrer bataille avec l’interface d'administration et le flux de travail de publication, juste pour faire des choses simples.&lt;/p&gt;

&lt;p&gt;Travailler avec le tinymce et le &lt;code&gt;HTML&lt;/code&gt; fonctionne plutôt bien, mais je trouve que l'écriture en &lt;code&gt;Markdown&lt;/code&gt; est beaucoup plus simple et &lt;a href="http://fr.wikipedia.org/wiki/Environnement_pervasif"&gt;pervasive&lt;/a&gt;.
Je passais mon temps à enlever des fonctionnalités, mettre à jour et installer des modules qui par dizaines en utilisant finalement 30% des fonctionnalités.&lt;/p&gt;

&lt;p&gt;J'ai donc quitté le monde Wordpress et &lt;code&gt;php&lt;/code&gt; pour travailler en `ruby avec un générateur de site statiques : &lt;a href="http://middlemanapp.com/"&gt;middleman&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="les-avantages"&gt;Les avantages&lt;/h2&gt;

&lt;h3 id="rapidit-dcriture"&gt;Rapidité d’écriture&lt;/h3&gt;

&lt;p&gt;Personnellement voici mon workflow pour publier du contenu.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;J’écris en markdown avec evernote (Généralement depuis ma tablette).&lt;/li&gt;
  &lt;li&gt;Je passe sur un ordinateur fixe pour gérer les medias images.&lt;/li&gt;
  &lt;li&gt;Je déploie depuis mon ordinateur portable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L’interface de wordpress est un bonne chose et propose &lt;s&gt;énormément&lt;/s&gt;, beaucoups trop d’options pour moi. Trop de solicitations qui au final perturbent votre flux de production de contenu. Un peu comme windows vous passez votre temps à protéger le système contre lui-même au lieu de travailler de façon efficace.&lt;/p&gt;

&lt;h3 id="rapidit-du-site"&gt;Rapidité du site&lt;/h3&gt;

&lt;p&gt;C’est simple : un site web statique se charge plus vite qu’un site hébergé sous wordpress. &lt;a href="https://twitter.com/ABrisset"&gt;@abrisset&lt;/a&gt; a fait l’expérience et chiffre à l’appui voici le résultat :&lt;/p&gt;

&lt;p&gt;&lt;img alt="migration wordpress - ruby on rails" src="https://farm4.staticflickr.com/3724/13851401935_98a7267d54_o.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Le site se charge 10 fois plus vite&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id="pas-de-base-de-donnes"&gt;Pas de base de données&lt;/h3&gt;

&lt;p&gt;Pas de configuration, pas de système complexes, pas de hack possible en accédant à &lt;code&gt;/wp-admin/&lt;/code&gt;. Travailler sur différents environnements est d'une simplicité déconcertante avec un &lt;code&gt;git clone nom-du-projet&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;La base de données est remplacé par de simples fichiers textes &lt;code&gt;.yml&lt;/code&gt; pour la configuration ou &lt;code&gt;.markdown&lt;/code&gt; pour le contenu.&lt;/p&gt;

&lt;h3 id="contrle-du-code"&gt;Contrôle du code&lt;/h3&gt;

&lt;p&gt;Wordpress est une bonne solution, mais niveau architecture du code et maintenance c’est juste le chaos le plus complet. On bourre tout dans &lt;code&gt;function.php&lt;/code&gt; et on verra après.&lt;/p&gt;

&lt;p&gt;Comme tout le monde :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;J'ai téléchargé un thème pour le modifier et me rendre compte qu'au final je n'avais besoin que de 10% des fonctionnalités offertes.&lt;/li&gt;
  &lt;li&gt;Je suis passé par la case framework de thèmes pour wordpress, qui au final complexifiait l'architecture.&lt;/li&gt;
  &lt;li&gt;Ma dernière expérience fut d'utiliser &lt;a href="http://underscores.me/"&gt;underscore&lt;/a&gt; (Un boilerplate simple de thème). Mais les performances n'étaient pas au rendez-vous.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finalement j'ai &lt;a href="http://middlemanapp.com/"&gt;middleman&lt;/a&gt; qui embarque de base &lt;a href="http://sass-lang.com/"&gt;Sass&lt;/a&gt;, &lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; et juste ce qu'il faut de &lt;a href="http://rubyonrails.org/"&gt;ruby&lt;/a&gt;. Je passe mon temps à construire des choses. Contrairement à wordpress où je passais mon temps à faire des &lt;em&gt;dirty hacks&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id="historique-des-version"&gt;Historique des version&lt;/h3&gt;

&lt;p&gt;Avec git, vous avez à votre disposition une machine à remonter le temps. Vous pouvez voir toutes vos modifications, créer des branches, tester des fonctionnalités et revenir en arrière facilement si cela ne fonctionne pas. Cela demande une certaine gymnatisque au début, mais impossible de revenir en arrière dès que l'on a commencé à comprendre comment cela fonctionne vraiment.&lt;/p&gt;

&lt;h3 id="en-rsum"&gt;En résumé&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Markdown&lt;/strong&gt; pour l'écriture.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Slim&lt;/strong&gt; pour le templating HTML.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sass&lt;/strong&gt; en préprocesseur CSS.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;CoffeeScript&lt;/strong&gt; pour la compilation du JavaScript.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt; pour la gestion des fichiers.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Terminal&lt;/strong&gt; pour &lt;em&gt;tout le reste&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Automatique&lt;/strong&gt; pour le déploiement.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Contrôle total&lt;/strong&gt; du site et surtout de sa mise en page.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Accessible&lt;/strong&gt; pour les débutants et évolutif pour les experts.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="les-inconvnients"&gt;Les inconvénients&lt;/h2&gt;

&lt;h3 id="le-media-manager"&gt;Le media manager&lt;/h3&gt;

&lt;p&gt;L'une des &lt;em&gt;killer feature&lt;/em&gt; de wordpress est sa gestion des images. Un simple drag &amp;amp; drop et vous pouvez ajouter une légende, les medias sont resizés en différentes tailles, et il est très facile de retrouver sa collection d'image.
Avec un générateur de site statique c'est plus compliqué car héberger ses images sur gitthub n'a pas de sens. Pour avoir des performances optimales vous devez utiliser un &lt;em&gt;CDN&lt;/em&gt; comme cloudfront, spécialisé dans le stockage.&lt;/p&gt;

&lt;p&gt;Personnellement j'utilise le CDN du pauvre : flickR. Avec 1 To de stockage disponible dans sa version gratuite, son retaillage des images et l'upload des photos en drag &amp;amp; drop, je met quiquonque au défi de trouver mieux.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sur flickR, si vous souhaitez faire un lien vers une image en .gif ou .png, sélectionnez la taille par défaut de votre image&lt;/p&gt;

  &lt;p&gt;&lt;cite&gt;Conseil du pro&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="la-correction-orthographique"&gt;La correction orthographique&lt;/h3&gt;

&lt;p&gt;Mon contenu est écrit en mode texte brut dans un éditeur de texte. Difficile d'avoir des outils de correction automatique dans cet environnement. Il m'arrive régulièrement de faire des fautes de frappes malgré ma relecture et je n'ai à ce jour pas trouvé de solution.&lt;/p&gt;

&lt;h3 id="pas-de-base-de-donnes-1"&gt;Pas de base de données&lt;/h3&gt;

&lt;p&gt;J’ai écris plus haut que c’était un avantage. C'est aussi un inconvénient dans le mesure où vous devrez sortir l'artillerie et le workflow de deploiement simplement pour corriger un "s" manquant. Avec wordpress il suffit de se connecter à l'interface d'admin et c'est corrigé en 2-3 clics.&lt;/p&gt;

&lt;h2 id="au-revoir-wordpress-et-bonjour-middleman"&gt;Au revoir wordpress et bonjour middleman&lt;/h2&gt;

&lt;p&gt;Rome ne s’est pas construite en un jour et migrer l’intégralité de votre contenu vous demandera un peu d'investissement (Personnellement cela m’a pris un peu plus d’un mois)
Voici 3 étapes qui vous feront gagner du temps :&lt;/p&gt;

&lt;h3 id="transformer-ses-articles-en-markdown"&gt;1. Transformer ses articles en markdown&lt;/h3&gt;

&lt;p&gt;Exitwp est un outil pour &lt;a href="https://github.com/thomasf/exitwp"&gt;migrer un ou plusieurs blogs wordpress&lt;/a&gt; vers le moteur de blog jekyll (un autre moteur de blog en ruby).&lt;/p&gt;

&lt;h3 id="utiliser-un-cdn-pour-les-images"&gt;2. Utiliser un CDN pour les images&lt;/h3&gt;

&lt;p&gt;Flickr avec son offre 1 To est une bonne alternative à un vrai CDN. L’avantage principal est la création des différentes tailles d’images lors de l’upload.&lt;/p&gt;

&lt;h3 id="raliser-un-plan-de-redirection"&gt;3. Réaliser un plan de redirection&lt;/h3&gt;

&lt;p&gt;Si vous ne souhaitez pas perdre la popularité associé à vos pages, vous devez faire des redirections 301. Le remercie &lt;a href="https://twitter.com/rduhomez"&gt;@rduhomez&lt;/a&gt;, référenceur de talent, pour m'avoir épargné quelques crises de nerf avec ses précieux conseils.
J'ai simplement réalisé un export de toutes mes anciennes url et mis en place des redirections avec le pattern suivant :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Redirect permanent /wordPress/about/ http://davidl.fr/about.html
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cette méthode peut être largement optimisée, et j'ai certainement perdu quelques morceaux dans la bataille, mais mon objectif principal et de produire du contenu &amp;amp; du code. De toute façon le SEO ça ne sert à rien ;) #privatejoke&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Ce système n'est pas adapté à tout le monde, et il faut une certaine philosophie de hacker / développeur / githuber pour travailler de cette façon. Dans mon cas, j'ai remarqué que c'est beaucoups plus efficace. Couplé avec bower je peux tester n'importe quelle fonctionnalité très rapidement comme les &lt;a href="http://davidl.fr"&gt;filtres avec mixitup&lt;/a&gt;, les &lt;a href="http://davidl.fr/webdesign.html"&gt;vidéos en background&lt;/a&gt;, changer complètement &lt;a href="http://davidl.fr/books.html"&gt;l'aspect du layout&lt;/a&gt; et utiliser des données de fichiers &lt;code&gt;.yml&lt;/code&gt; pour être évolutif …&lt;/p&gt;

&lt;h2 id="ressources"&gt;Ressources&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href="https://github.com/thomasf/exitwp"&gt;exitwp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://davidl.fr/blog/hebergement-gratuit-ovh.html"&gt;Héberger son site sur GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Proposition de redesign du louvrelens.fr</title>
    <link rel="alternate" href="http://davidl.fr/blog/louvrelens.html"/>
    <id>http://davidl.fr/blog/louvrelens.html</id>
    <published>2014-03-31T22:00:00Z</published>
    <updated>2014-05-16T09:01:17+02:00</updated>
    <author>
      <name>DavidL design + développement</name>
    </author>
    <content type="html">&lt;p&gt;Chaque jour, dans la communauté des designer, les &lt;a href="http://dribbble.com/search?page=4&amp;amp;amp;q=redesign"&gt;proposition de redesign&lt;/a&gt; pleuvent : iOs, Facebook, Twitter … Je salue bien évidemment cette performance. Mais pourquoi ne pas s’intéresser à de vrais sites qui ont vocation à être accessibles au plus grand nombre ?&lt;/p&gt;

&lt;p&gt;&lt;a href="http://responsivemuseum.tumblr.com/"&gt;Responsive Museum&lt;/a&gt; propose de modifier la feuille de styles CSS du site d’un musée pour le rendre lisible sur mobile, tablette, etc… J’ai voulu participer à cette chouette initiative en proposant la refonte du &lt;a href="http://www.louvrelens.fr/"&gt;LouvreLens&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="pourquoi-un-redesign-"&gt;Pourquoi un redesign ?&lt;/h2&gt;

&lt;p&gt;Pour préparer ma prochaine visite au musée, je me suis installé dans mon canapé avec ma tablette. Je découvre que le site internet n’est pas responsive. L’expérience n’est donc pas optimisée pour la mobilité. Je décide de télécharger l’application Android. et là c’est le drame : &lt;em&gt;Cette application n’est pas compatible avec votre appareil&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="louvrelen et android" src="https://farm8.staticflickr.com/7117/13621111873_2b530fb811_o.png" /&gt;&lt;/p&gt;

&lt;p&gt;Le problème principal est d’avoir divisé le site en 3 parties : l’accès web, l’accès Android et iPhone.
J’ai déjà évoqué le fait que ce choix &lt;a href="http://davidl.fr/blog/webdesign-adaptatif-vs-site-mobile-vs-application-native.html"&gt;multiplie les coûts&lt;/a&gt; et je ne pense pas que ce soit une bonne solution pour &lt;a href="http://fr.wikipedia.org/wiki/Louvre-Lens#Fonctionnement"&gt;le budget de fonctionnement&lt;/a&gt; alloué aux mises à jour du contenu en ligne.&lt;/p&gt;

&lt;h2 id="audit-de-navigation"&gt;Audit de navigation&lt;/h2&gt;

&lt;p&gt;&lt;img alt="homepage" src="https://farm8.staticflickr.com/7081/13621447714_a6668d31c3_b.jpg" /&gt;&lt;/p&gt;

&lt;p&gt;Contenu de la page d’accueil actuelle :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Une liste de lien en haut de page.&lt;/li&gt;
  &lt;li&gt;Un menu principal de navigation.&lt;/li&gt;
  &lt;li&gt;Un carrousel d’actualités.&lt;/li&gt;
  &lt;li&gt;Un menu récapitulant tous les liens du site.&lt;/li&gt;
  &lt;li&gt;Une liste de lien en bas de page.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="la-navigation-nest-pas-assez-stratgique"&gt;La navigation n’est pas assez stratégique&lt;/h3&gt;

&lt;p&gt;Il existe plus de 5 manières de naviguer sur le site avec différents problèmes :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Doublons de page d’entrée.&lt;/li&gt;
  &lt;li&gt;Pas de cohérence de catégories.&lt;/li&gt;
  &lt;li&gt;Un &lt;a href="https://31.media.tumblr.com/20dfb470e44ec08f07f240c16902e703/tumblr_mze5idLVTu1toamj8o2_500.gif"&gt;menu pour naviguer dans le menu&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="menu-principal"&gt;Menu principal&lt;/h3&gt;

&lt;p&gt;À mon avis, le site d’un musée doit d’être accessible à tous, et apparemment d’ici 2015 ce ne sera &lt;a href="http://www.lexpress.fr/actualites/1/societe/handicap-l-echeance-de-2015-d-accessiblite-pour-tous-pas-negociable_1023008.html"&gt;pas négociable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;La navigation actuelle du Louvre-Lens ne me parait pas très lisible :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Petite taille de la police.&lt;/li&gt;
  &lt;li&gt;Chevauchement des caractères.&lt;/li&gt;
  &lt;li&gt;Mauvais contraste des couleurs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="contraste menu" src="https://farm8.staticflickr.com/7036/13621447294_b2a31ae1be_o.png" /&gt;&lt;/p&gt;

&lt;h3 id="le-but-principal-nest-pas-atteint"&gt;Le but principal n'est pas atteint&lt;/h3&gt;

&lt;p&gt;Les 3 informations capitales qui devraient êtres mises en avant sont : Les &lt;strong&gt;horaires&lt;/strong&gt;, Les &lt;strong&gt;tarifs&lt;/strong&gt; et les &lt;strong&gt;évènements à venir&lt;/strong&gt;. Les visiteurs doivent trouver ces informations très simplement afin de faciliter leur décision de venir visiter le musée.&lt;/p&gt;

&lt;p&gt;Le Louvre-Lens est un lieu d'exception à explorer, mais la navigation actuelle ne permet pas aux utilisateurs de trouver facilement les informations qu'ils recherchent.&lt;/p&gt;

&lt;h2 id="solutions"&gt;Solutions&lt;/h2&gt;

&lt;h3 id="menu-principal-1"&gt;Menu principal&lt;/h3&gt;

&lt;p&gt;En supprimant et en regroupant les informations il est possible de simplifier le menu principal.
Il est responsive est s'adapte en fonction de la taille de l'écran.&lt;/p&gt;

&lt;p&gt;L'unique bouton est un tunnel d'entrée vers le contenu personnalisé des utilisateurs.&lt;/p&gt;

&lt;p&gt;&lt;img alt="menu responsive anime" src="https://farm4.staticflickr.com/3803/13621448534_763dd528ea_o.gif" /&gt;&lt;/p&gt;

&lt;h3 id="navigation-par-catgories"&gt;Navigation par catégories&lt;/h3&gt;

&lt;p&gt;Pour garder captif l'attention des visiteurs, les entrées vers les différentes pages essentielles sont positionnées en bas de page, avant le footer.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Horaires&lt;/li&gt;
  &lt;li&gt;Billets&lt;/li&gt;
  &lt;li&gt;Boutiques&lt;/li&gt;
  &lt;li&gt;Agenda&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt="Navigation par catégories" src="https://farm4.staticflickr.com/3713/13621090445_7ce1677993_o.png" /&gt;&lt;/p&gt;

&lt;p&gt;Comme sur une carte où l'on affiche la position actuelle, le lien vers &lt;strong&gt;la page en cours&lt;/strong&gt; est contrasté pour inviter à la découverte des autres catégories.&lt;/p&gt;

&lt;h3 id="dmonstration"&gt;Démonstration&lt;/h3&gt;

&lt;p&gt;Ma philosophie est le développement open source et grâce à la magie de Ruby on Rails et SASS tout est disponible sur github.&lt;/p&gt;

&lt;div class="row"&gt;
  &lt;div class="medium-6 columns"&gt;&lt;a href="http://flexbox.github.io/louvrelens/" class="button secondary expand"&gt;Demo&lt;/a&gt;&lt;/div&gt;
  &lt;div class="medium-6 columns"&gt;&lt;a href="https://github.com/flexbox/louvrelens" class="button expand"&gt;Code source&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;N'hésitez pas à aller "pirater" mon code source :)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>La mediaquery du 01 Avril</title>
    <link rel="alternate" href="http://davidl.fr/blog/easter-egg-april.html"/>
    <id>http://davidl.fr/blog/easter-egg-april.html</id>
    <published>2014-03-31T22:00:00Z</published>
    <updated>2014-04-03T14:03:58+02:00</updated>
    <author>
      <name>DavidL design + développement</name>
    </author>
    <content type="html">&lt;p&gt;Visible uniquement pour les tablettes, si vos visiteurs retournent leur appareil, le site fait une rotation. Si ils retournent leur tablettte, …&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@media only screen and (min-width: 350px) and (max-width: 1025px) {
  body {
    transform : rotate(180deg);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Voir la &lt;a href="https://vine.co/v/MeDj23XKT3T"&gt;vidéo sur vine&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Astuces et conseils de développeur web front-end</title>
    <link rel="alternate" href="http://davidl.fr/blog/conseil-dev.html"/>
    <id>http://davidl.fr/blog/conseil-dev.html</id>
    <published>2014-03-30T22:00:00Z</published>
    <updated>2014-04-29T13:33:53+02:00</updated>
    <author>
      <name>DavidL design + développement</name>
    </author>
    <content type="html">&lt;p&gt;Apprendre. Coder rapidement. Livrer. Vendre. C'est la baseline de &lt;a href="http://www.dotnetdojo.com/donnez-meilleur-conseil-developpement-web-200-euros-a-gagner/"&gt;dotnetdojo&lt;/a&gt; un blog qui propose de partager son meilleur conseil concernant le développement web. J'ai décidé de participer à l'opération, en donnant ma meilleure astuce en tant que développeur front-end :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Codez pour le système et non pour les pages&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id="principe-dun-systme-de-design"&gt;Principe d’un système de design&lt;/h2&gt;

&lt;p&gt;Un système possède des composants de base comme la typographie, la mise en page, les formes, les couleurs. Quand vous considérez la conception d’un produit en entier ces composants peuvent êtres enrichis de patrons de conception, de stratégie du contenu, du ton employé… Ces décisions peuvent vous aider à avoir un produit cohérent tout au long du processus de conception.&lt;/p&gt;

&lt;p&gt;Depuis l’avènement du responsive design, ce principe est de plus en plus vrai. Le comportement de chaque composant doit être testé sur différents appareils. Il faut vérifier sa réaction, permettre qu’il soit flexible et qu’il délivre une expérience optimale indépendamment du périphérique utilisé.&lt;/p&gt;

&lt;h3 id="composants-qui-ne-se-modifient-pas-"&gt;Composants qui ne se modifient pas :&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Unités de base&lt;/li&gt;
  &lt;li&gt;Couleurs&lt;/li&gt;
  &lt;li&gt;Formes&lt;/li&gt;
  &lt;li&gt;Typographie&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="composants-au-comportement-fluide-"&gt;Composants au comportement fluide :&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Grille&lt;/li&gt;
  &lt;li&gt;Mise en page&lt;/li&gt;
  &lt;li&gt;Taille des polices&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="composants-de-base"&gt;Composants de base&lt;/h2&gt;

&lt;h3 id="priorit--la-typographie"&gt;Priorité à la typographie&lt;/h3&gt;

&lt;p&gt;Quand vous travaillez dans un contexte avec énormément de texte, la typographie est la façon la plus simple de donner une ambiance visuelle à votre contenu. Généralement je choisis &lt;a href="http://davidl.fr/blog/typographie-google-font.html"&gt;2 polices de caractères&lt;/a&gt; différentes :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sans shérif pour le contenu&lt;/li&gt;
  &lt;li&gt;Shérif pour les titres&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour donner un rythme vous pouvez aussi jouer avec du contenu en gras, en italique, avec les tailles différentes …
L'avantage est que si le &lt;code&gt;viewport&lt;/code&gt; change, votre expérience de lecture restera cohérente.&lt;/p&gt;

&lt;h3 id="typographie-et-mise-en-page"&gt;Typographie et mise en page&lt;/h3&gt;

&lt;p&gt;L'une des première chose est de choisir une unité de base pour commencer à travailler. Nombre de colonnes et taille maximale pour votre grille, taille de la police et des titrage basés sur la suite de fibonachi, ou quelque chose de plus arbitraire. Des fois il est judicieux de choisir des multiples de 10 pour rendre les calculs mathématiques en CSS plus simples. Le typographe Tim Brown suggère d'essayer la méthode d'&lt;a href="http://alistapart.com/article/more-meaningful-typography"&gt;échelle modulaire&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="grille-et-mise-en-page"&gt;Grille et mise en page&lt;/h3&gt;

&lt;p&gt;Une grille fluide est une base solide pour la conception de votre système de mise en page. Mais vous devez vous faire à l'idée que votre système doit fonctionner à travers différentes résolutions. Vous devez garder votre composant de grille &lt;a href="http://fr.wikipedia.org/wiki/Environnement_pervasif"&gt;pervasif&lt;/a&gt;. Si votre contenu contient un groupe de 3 blocs sur une ligne, vous devez le faire passer à 1 bloc sur 3 lignes pour pouvoir être affiché sur mobile.&lt;/p&gt;

&lt;p&gt;Cela peut paraître simpliste, mais c'est extrèmement important pour le designer. Il pourra mettre en avant certains blocs, choisir de centrer du texte et des icones dans un certain contexte, aligner à gauche dans un autre…
L'important est d'avoir le plus d'éléments communs pour conserver une expérience utilisateur uniforme.&lt;/p&gt;

&lt;h3 id="former-des-composants"&gt;Former des composants&lt;/h3&gt;

&lt;p&gt;Concevoir des composants est un concept déjà utilisé dans l'ancien monde du "codage par page".&lt;/p&gt;

&lt;p&gt;Depuis que la propriété CSS &lt;code&gt;border-radius&lt;/code&gt; est supporté par les principaux navigateurs, beaucoups de design sont basés sur des cercles. Les composants boutons avec une bordure arrondie ou non sont des éléments qui se distinguent très rapidement.&lt;/p&gt;

&lt;p&gt;Utilisés correctement ensembles, vous obtenez une atmosphère unique, réutilisable et cohérente. L'astuce conciste à penser de façon globale en analysant tous les composants qui forment une page :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boutons&lt;/li&gt;
  &lt;li&gt;Listes&lt;/li&gt;
  &lt;li&gt;Fil d'arianne&lt;/li&gt;
  &lt;li&gt;Contenu mis en avant&lt;/li&gt;
  &lt;li&gt;Menu principal&lt;/li&gt;
  &lt;li&gt;Navigation secondaire&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;J'utilise &lt;a href="http://sass-lang.com/"&gt;SASS&lt;/a&gt; pour faciliter la constructions de composants.&lt;/p&gt;

&lt;h3 id="couleur"&gt;Couleur&lt;/h3&gt;

&lt;p&gt;La couleur est la façon la plus basique de renforcer son image dans le monde multi-écran. Utiliser un bon système de couleur permet d'être facilement reconnaissable, et fonctionne sur n'importe quel appareil.&lt;/p&gt;

&lt;h3 id="processus-de-conception"&gt;Processus de conception&lt;/h3&gt;

&lt;p&gt;Utiliser un système de design n'est pas forcément associé à une méthode particulière, mais les conseils suivants peuvent vous aider.&lt;/p&gt;

&lt;h4 id="sortir-du-paradigmehttpfrwikipediaorgwikiparadigme"&gt;Sortir du &lt;a href="http://fr.wikipedia.org/wiki/Paradigme"&gt;paradigme&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Un &lt;a href="http://styletil.es/"&gt;système de design&lt;/a&gt; permet de se concentrer en séparant les différents composant. Travailler indépendamment de la mise en page permet de construire ses éléments simplement, sans rentrer dans l'enfer du &lt;code&gt;breakpoint&lt;/code&gt;. Cela nous force à employer des éléments réutilisables, ce qui au final nous amène à produire moins de code.&lt;/p&gt;

&lt;h4 id="concevoir-dans-le-navigateur"&gt;Concevoir dans le navigateur&lt;/h4&gt;

&lt;p&gt;Personnellement je ne peux pas commencer de nouveau projet en concevant dans le navigateur.  (Et je suis admiratif si vous y arrivez, généralement je commence avec un papier et un crayon) Les maquettes statiques ne sont pas la seule alternative. Les &lt;a href="http://trulia.github.io/hologram/"&gt;guides de styles&lt;/a&gt; sont parfait pour exprimer les concepts de votre système de design. Les bibliothèques de patron de conception fonctionnent aussi très bien.&lt;/p&gt;

&lt;h4 id="la-limite-des-prototypes"&gt;La limite des prototypes&lt;/h4&gt;

&lt;p&gt;Arrivé à un certain moment, pour tester vos idées, ou parce qu'un client à besoin d'aide pour visualiser comment votre système fonctionne, vous allez devoir arrêter de construire vos composants pour mettre en place vos différentes pages. C'est une bonne occasion pour faire un "stress test" et les confronter à de vraies données. Ce n'est pas la fin du monde mais vous devez vous assurer que vos composants fonctionnent sur &lt;strong&gt;tous les appareils&lt;/strong&gt;, pas seulement les iBidules, ou même les mobiles actuellement à la mode.&lt;/p&gt;

&lt;p&gt;Vous allez choisir les &lt;code&gt;breakpoint&lt;/code&gt; en fonction de votre contenu (hiérarchie, densité d'affichage, type d'interaction) pour avoir un affichage idéal. Avec de vraies données et les retours de vos clients, vous allez pouvoir facilement faire des modification car en changeant une partie de vos composants, la modification sera répercutée partout dans votre application.&lt;/p&gt;

&lt;h2 id="prpar-pour-lavenir"&gt;Préparé pour l’avenir&lt;/h2&gt;

&lt;p&gt;Créer des systèmes de conception nous donne la souplesse nécessaire pour être compatible avec les périphériques inconnus de l'avenir. C'est peut-être un changement de processus, mais il n'est pas très compliqué d'adopter un mode de pensée objet. Les pionniers dans la conception adaptative ont un travail difficile. Certains de ces problèmes ont peut-être déjà été résolus dans d'autres technologies ou d'autres industries, mais c'est à nous de trouver ces liens, pour nous aider à créer des solutions et des normes qui offriront la meilleure expérience possible aux utilisateurs.&lt;/p&gt;

&lt;p&gt;Nous devons continuer à expérimenter et à communiquer, en particulier dans le domaine du design, les expériences d'utilisateurs réussies sont un vrai signe pour savoir si notre système fonctionne.&lt;/p&gt;
</content>
  </entry>
</feed>
